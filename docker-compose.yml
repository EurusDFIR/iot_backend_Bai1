services:
  # PostgreSQL Database for IoT Backend
  postgres:
    image: postgres:15
    container_name: pg-iot
    environment:
      POSTGRES_DB: iotdb
      POSTGRES_USER: iotuser
      POSTGRES_PASSWORD: secret
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iotuser -d iotdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Mosquitto MQTT Broker
  mosquitto:
    image: eclipse-mosquitto:2
    container_name: mosquitto-iot
    ports:
      - "1883:1883"    # MQTT port
      - "9001:9001"    # WebSocket port
    volumes:
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "mosquitto_pub -h localhost -t health/check -m 'test' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Spring Boot IoT Backend Application
  iot-backend:
    build: .
    container_name: iot-backend-app
    ports:
      - "8080:8080"
    environment:
      # Database config - connect to postgres container
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/iotdb
      SPRING_DATASOURCE_USERNAME: iotuser
      SPRING_DATASOURCE_PASSWORD: secret
      # MQTT config - connect to mosquitto container
      MQTT_HOST: mosquitto
      MQTT_PORT: 1883
      # JVM optimization
      JAVA_OPTS: "-Xmx512m -Xms256m"
    depends_on:
      postgres:
        condition: service_healthy
      mosquitto:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/devices || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

volumes:
  postgres_data:
    driver: local
  mosquitto_data:
    driver: local
  mosquitto_logs:
    driver: local